//we will now design a popup which opens on book button => html for this we have added outside everything as order does not matter => when this opens, we
//want the bg to be black and popup box on top of that =>

.popup {
  //takes full height
  height: 100vh;
  width: 100%;
  //fixed position so that scroll is not possible
  position: fixed;
  top: 0;
  left: 0;
  //bg is black white little transparent
  background-color: rgba($color-black, 0.8);
  //since should be on top of everything
  z-index: 9999;
  //initially not show it
  opacity: 0;
  //hide as well so that buttons are not clickable
  visibility: hidden;
  transition: all 0.3s;

  //this is the actual popup box that we have in white =>
  &__content {
    //see this in mixin file => absCenter code is basucally position absoilute and center using top left and translate
    @include absCenter;

    width: 75%;
    background-color: $color-white;
    box-shadow: 0 2rem 4rem rgba($color-black, 0.2);
    border-radius: 3px;
    display: table;
    //image was overlapping the border and hence this
    overflow: hidden;
    opacity: 0;
    transform: translate(-50%, -50%) scale(0.25);
    transition: all 0.5s 0.2s;
  }

  //now in html we have created left part having 2 images, right part having text heading text
  //so we have given widths to both left and right below =>
  //now to posiution everything we can use float left for both => but you will see that though images are fine, the text part in total does not have same
  //height as 2 images total height and hence we cant use center etc on text side => we will not use float but bwlow trick instead => very useful

  //we will make left and right as table cell and make the parent content as table display => after doing this, though height of both is still not same but
  //we can use vertical align of table cell to center everything like shown
  &__left {
    width: 33.333333%;
    display: table-cell;
  }

  &__right {
    width: 66.6666667%;
    display: table-cell;
    vertical-align: middle;
    padding: 3rem 5rem;
  }

  //we dont want second img inline => make it block and take width of parent left completely
  &__img {
    display: block;
    width: 100%;
  }

  &__text {
    font-size: 1.4rem;
    margin-bottom: 4rem;

    //now we want to split the text into 2 cols like how texts are in newspapers multicols
    //so text is in 2 cols and we can use the below col count to break it and gap bw them => col layout is very new feature in css and supported by many
    //browsers. the col rule basically adds a border kind of thing exactly in the middle of these 2 cols
    -moz-column-count: 2;
    -moz-column-gap: 4rem; //1em = 14px;
    -moz-column-rule: 1px solid $color-grey-light-2;

    column-count: 2;
    column-gap: 4rem; //1em = 14px;
    column-rule: 1px solid $color-grey-light-2;

    //this will basically break the text with hyphen if it not fits
    -moz-hyphens: auto;
    -ms-hyphens: auto;
    -webkit-hyphens: auto;
    hyphens: auto;
  }

  //Now in the html we have added a id to this popup section id="popup" and for any of the link click of book now => we have href="#popup" => it will
  //target as popup and take us to there => even in url we will localhost:8080/#popup => now at this point, we should start showing the popup => if
  //target i.e. popup is target i.e. in url => we should set opacity and visibiluty like below i.e. popup:target
  //Open states
  &:target {
    opacity: 1;
    visibility: visible;
  }

  //also we want content box to come towards the user i.e. animtationa dn thus we add this and transition to initial state
  &:target &__content {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
  }
  //we have added a close <a> element again which again has href as section tours so that when close is clicked, it takes you to section-tours and popup is
  //no longer target and popup:target wont come and popup will hide

  &__close {
    &:link,
    &:visited {
      color: $color-grey-dark;
      position: absolute;
      top: 2.5rem;
      right: 2.5rem;
      font-size: 3rem;
      text-decoration: none;
      display: inline-block;
      transition: all 0.2s;
      line-height: 1;
    }

    &:hover {
      color: $color-primary;
    }
  }
}
