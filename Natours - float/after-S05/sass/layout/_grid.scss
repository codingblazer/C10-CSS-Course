// So for the row, the standard convention is to use the width of 1140px = 114 rem => and we have given it max width because if the browser window is resized
//and 114rem width is not present in the viewport itself, then it will simply take 100% of width available. The margin 0 auto is trick to center the block
//element inside another block element => 0 means top and bottom => auto means browser will give it => browser will it equal for left and right since auto
//and thus item will be in the center.

//this selector means &:not(:last-child) => that inside the row, all except the last child this will apply => this is space between the rows which we named
//as gutter-vertical =>

.row {
  max-width: $grid-width;
  margin: 0 auto;

  &:not(:last-child) {
    margin-bottom: $gutter-vertical;
  }

  //we have created a clearfix mixin in mixin file and included this because for all cols class, we have floated the item to the left => height of the item
  //will be zero for the cols since they are floated => clearfix is added to clear the float effects => note the selctor => [] is used to select by attribute
  //=> any element having attribute class with the value starting with col-
  @include clearfix;

  [class^="col-"] {
    float: left;

    //So we are saying that except the last grid, all the grids will have right margin as gutter width. Last child wont have it because gutter is bw them in
    //the image.
    &:not(:last-child) {
      margin-right: $gutter-horizontal;
    }
  }

  //so if we see the first row => we have 2 cells/grids and they are equal => half of (total width - the space/gutter between them) => we use calc like
  //below to calculate that
  .col-1-of-2 {
    width: calc((100% - #{$gutter-horizontal}) / 2);
  }

  .col-1-of-3 {
    width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
  }

  .col-2-of-3 {
    width: calc(
      2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal}
    );
  }

  .col-1-of-4 {
    width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
  }

  .col-2-of-4 {
    width: calc(
      2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal}
    );
  }

  .col-3-of-4 {
    width: calc(
      3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal}
    );
  }
}
