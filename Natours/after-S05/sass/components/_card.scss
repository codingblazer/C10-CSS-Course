//we are creating a card here => inside card we will create 2 sides described both by side as common class and then --front --back as specific classes for
//each side as below => Now we want an animation where it seems that card rotate on hover but actually on hover, we will be switching bw these 2 diff sides
// since side is like child of card, we will use hover on card and not on side since side will keep changing => see below => &--front => this is card:hover
// means when hover happens on parent card, then for front side child of it rotate it by 180 => and also if you see  &--back { => it is already 180 in initial
//state => and on card:hover, this back child i.e. &:hover &__side--back => will rotate from initial 180 to 0 => now since there is no z index, both are at
//same z => we have added backface visibility as hidden => this means that any side which is back faced i.e. rotated from initial state, the back part of it
//is hidden => bakcface property is only used when using rotate => this prop means that when hover happens, front is actually back faced and that will be hidden
//and since both back and front are at same position using absolute 0,0 => front is hidden and back is shown => when hover goes away => back will come to initial
//and front to 0 initial => front will be shown => also this transition we have added as ease fro smoothness => also we have added perspective prop => thsi
//prop actually gives the effect that rotate is happening outwards towards user like 3d => needs to give any very big value for this to work => moz is done
// for it to work with mozilla => and this prop is always added to parent of thing on which you need this effect.
// since absolute position, element start to take width of content => given width 100% to take width of card parent which has width already through cols
// since absolute card has zero height because inm case of absolute parent height collapses => given same height of side to card

.card {
  // FUNCTIONALITY
  perspective: 150rem;
  -moz-perspective: 150rem;
  position: relative;
  height: 52rem;

  &__side {
    height: 52rem;
    transition: all 0.8s ease;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    backface-visibility: hidden;
    border-radius: 3px;
    overflow: hidden; //side has a picture which is overflowing this parent in the corners => overflow hidden makes any part of child overflowing the parent to hide
    box-shadow: 0 1.5rem 4rem rgba($color-black, 0.15);

    &--front {
      background-color: $color-white;
    }

    &--back {
      transform: rotateY(180deg);

      &-1 {
        background-image: linear-gradient(
          to right bottom,
          $color-secondary-light,
          $color-secondary-dark
        );
      }

      &-2 {
        background-image: linear-gradient(
          to right bottom,
          $color-primary-light,
          $color-primary-dark
        );
      }

      &-3 {
        background-image: linear-gradient(
          to right bottom,
          $color-tertiary-light,
          $color-tertiary-dark
        );
      }
    }
  }

  &:hover &__side--front {
    transform: rotateY(-180deg);
  }

  &:hover &__side--back {
    transform: rotateY(0);
  }

  // FRONT SIDE STYLING
  &__picture {
    background-size: cover;
    height: 23rem;
    background-blend-mode: screen; //there are many diff blend modes which blend the bg color and bg image that we have given below in specific pics
    -webkit-clip-path: polygon(
      0 0,
      100% 0,
      100% 85%,
      0 100%
    ); //webkit clippath is used to support it in other browsers also
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    border-top-left-radius: 3px;
    border-top-right-radius: 3px;

    &--1 {
      background-image: linear-gradient(
          to right bottom,
          $color-secondary-light,
          $color-secondary-dark
        ),
        //this url is given wrt to css style.css file because after compilation to css, it will search image from there and not from scss file
          url(../img/nat-5.jpg);
    }

    &--2 {
      background-image: linear-gradient(
          to right bottom,
          $color-primary-light,
          $color-primary-dark
        ),
        url(../img/nat-6.jpg);
    }

    &--3 {
      background-image: linear-gradient(
          to right bottom,
          $color-tertiary-light,
          $color-tertiary-dark
        ),
        url(../img/nat-7.jpg);
    }
  }

  //IMP note =. in chrome dev tools -> styles -> you can select :hov and then select the state to see classes for that state
  //this is for the text on the image
  &__heading {
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    text-align: right;
    color: $color-white;
    position: absolute; //using absolute position to overlap text on the image
    top: 12rem;
    right: 2rem;
    width: 75%;
  }

  &__heading-span {
    //we have this heading inside span and thus when overflow happens, it will break to next line
    padding: 1rem 1.5rem;
    //Now if we add padding => it will be added to start and end which are in diff lines because absolte pos has to be followed and oerflow took it to next line
    //to get padding in end of first and start of seconf line we use below => which says that any break happens, clone the styling and hence padding will be
    //in botht the lines
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone;

    &--1 {
      background-image: linear-gradient(
        to right bottom,
        rgba($color-secondary-light, 0.85),
        rgba($color-secondary-dark, 0.85)
      );
    }

    &--2 {
      background-image: linear-gradient(
        to right bottom,
        rgba($color-primary-light, 0.85),
        rgba($color-primary-dark, 0.85)
      );
    }

    &--3 {
      background-image: linear-gradient(
        to right bottom,
        rgba($color-tertiary-light, 0.85),
        rgba($color-tertiary-dark, 0.85)
      );
    }
  }

  &__details {
    padding: 3rem;

    ul {
      list-style: none;
      width: 80%;
      margin: 0 auto;

      li {
        text-align: center;
        font-size: 1.5rem;
        padding: 1rem;

        &:not(:last-child) {
          border-bottom: 1px solid $color-grey-light-2;
        }
      }
    }
  }

  // FRONT SIDE STYLING
  &__cta {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    text-align: center;
  }

  &__price-box {
    text-align: center;
    color: $color-white;
    margin-bottom: 8rem;
  }

  &__price-only {
    font-size: 1.4rem;
    text-transform: uppercase;
  }

  &__price-value {
    font-size: 6rem;
    font-weight: 100;
  }
}
