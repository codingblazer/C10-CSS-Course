* {
  margin: 0;
  padding: 0;
}
//This is how the variables are declared and also comments can be done using the //
$color-primary: #f9ed69; //yellow color
$color-secondary: #f08a5d; //orange
$color-tertiary: #b83b5e; //pink
$color-text-dark: #333;
$color-text-light: #eee;

$width-button: 150px;

//mixin is a reusable block of code => content inside it will be copied wherever it is included => see it is used inisde nav {} => Since inside nav we
//have floated elements, we are clearing the floats so that anything after nav does not follows into the empty space left here and also height of nav is ok.
//we have included some more mixins like style-link-text by moving common code => DRY dont repeat yourself => mixin like shown can take arguments also like
//shown.
@mixin clearfix {
  &::after {
    content: "";
    clear: both;
    display: table;
  }
}

@mixin style-link-text($col) {
  text-decoration: none;
  text-transform: uppercase;
  color: $col;
}

//See the function below => same as mixin but it returns a value instead of code => we can create our own like below or use inbuild like darken etc

@function divide($a, $b) {
  @return $a / $b;
}

nav {
  margin: divide(60, 2) * 1px; //30px
  background-color: $color-primary; //this is how the variable is used

  @include clearfix;
}

//In css, to do the same, we have do it like .navigation li {} but in case of SCSS, we can do nesting like below and thus better organisation of code.
.navigation {
  list-style: none;
  float: left;

  li {
    display: inline-block;
    margin-left: 30px;

    &:first-child {
      // let say we want to apply margin 0 but only to the first li element => we can do .navigation li li:first-child ie. in css we write full
      //path => but here because of nesting we can put it inside. Now we can like shown, include the li:first inside the li and since it is actually not
      //inside li in html => we can say append &: before it which means...just write the complete path leading to this block i.e. navigation li
      margin: 0;
    }

    a:link {
      @include style-link-text($color-text-dark);
    }
  }
}

.buttons {
  float: right;
}

%btn-placeholder {
  padding: 10px;
  display: inline-block;
  text-align: center;
  border-radius: 100px;
  width: $width-button;
  @include style-link-text($color-text-light);
}

//See below => we can use the & like below as well to define multiple states of anything since & will be replaced by the btn-main => Also see the inbuild color
//function darken which takes the color and darkens it by given amount and similarly we have a lighter function

//Also see the extend below in btn-main and btn-hot => extend is exactly opposite of mixin => Wherever you put extend, the selectors will be copied and pasted in extend declaration =>
// .btn-main { &:link { => this selector will be copied and pasted in place of %btn-placeholder { above => .btn-main {background-color: $color-secondary;} will
//remain below only. The benfit of this is that if we would have used mixin => then btn-placeholder code would have been copied and pasted at 2 places below i.e.
//btn-main and btn-hot while in this case => selectors are copied and thus placeholder block above will become  .btn-main {&:link {, .btn-hot {&:link { definition}}
//thus multiple selectors for same code and thus no repetition of code i.e. DRY => but we should use extend only when selectors are related like this i.e. btn
//and can use mixin always as well
.btn-main {
  &:link {
    @extend %btn-placeholder;
    background-color: $color-secondary;
  }

  &:hover {
    background-color: darken($color-secondary, 15%);
  }
}

.btn-hot {
  &:link {
    @extend %btn-placeholder;
    background-color: $color-tertiary;
  }

  &:hover {
    background-color: lighten($color-tertiary, 10%);
  }
}

//Next we will install a SCSS compiler using npm => npm is package manager and CLI to download it and also provide npm scripts. We can come inside project
//folder and do npm init which will just create package.json file and nothing else. Then we install npm install node-sass --save-dev => save dev adds it as
//dev dependency meaning that it is development tool only since after converting sass to css we deploy that css and sass compiler is then never used. Ex- jquery
//being actually used in the code wont be dev dependency. Why do we need package.json => because when sharing project we can share this package.json and
//dependencies in node modules can be reconstructed from it => package.json can be included in any project using js based dependencies and nothing to do with
//node js

//NPM script => Let create a folder sass inside this and main.scss file inside it => We will move code from style.css to main.scss and it will work bcoz
//valid css is valid scss as well => we can add some scss things like variables inside this and now add npm script for sass inside package.json and then
//run that npm script => npm run compile:sass and once done we will see output css file in css output folder that we gave => We can add the -w flag in the
//npm script which will watch the scss file for any changes => npm run process wont end and it will watch for changes.

// Like the watch above, we however want it for all files of the project and there is package for that => live-server and we can do npm install -g i.e.
//globally so that all projects on this computer have this package and you might get error due to permission and hence use sudo for this => and since this
//is global package we can run it from terminla directly and not through npm script => we can do live-server on terminal and it will work => its actually actual
//http server instead of file server (earlier we were simply opening html file which is file server)
