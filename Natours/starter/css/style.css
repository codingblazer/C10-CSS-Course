/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* This is something we should always do called resetting => So many browsers have default padding, margin with elememts like h1, etc that gets auto
added by the browser and this resetting will reset it for us so we always add any padding etc ourself only. Also let say you give height 5px to element
and element has padding of 4 px and 1 px border => eff height of element will be 0px but we dont want to check margin, pad, border etc everytime we give 
height and hence box-sizing border box will make the elements height not include these */

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* We are putting the fonts in body so that it applies to everything which is inheritance => We could have put it in * above but putting it in body is
best practive => we are able to use lato font family because we included google fonts css in html file for diff font weights => line height 1.7 means
it is 1.7 times bigger than default line height => We have vs code extension if we click color on below and click an nywhere in color palette that color 
will be selected*/

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  color: rgb(119, 119, 119);
  padding: 30px;
}

/* 95vh => 95% of viewport height => viewport is basically what you are seeing i.e. if we decrease window size, vw height will be smaller window height => 
even if broswer is reduced, this header will always be 95% of what is visible to user on that window. Cover background size means that whatever might be the size of viewport
and the image, it will always fit the image in the element i.e. element will be 100% filled by image but also respect the aspect ration (original height to width ratio of 
image) => so let say you change the window size and at any window size, it will have to fill header by 100% of image => it will fill the elmemnet in such manner that if it 
fills full width and based on aspect of image if height of image is more than 90vw that will be cropped i.e. the extra height OR it might fill full height
 with image and based on aspect let say width of image is overflowing and thus that will be cropped */
/* background position tells where to crop image from in case of overflow i.e. top meaning that top will be fixed and thus anything overflow will crop from 
bottom and it can be center or bottom as well*/
/* Gradient is set using bg image and this add things after url => since we want gradient to be on top of iamge, write gradient first. We can give one or 2 directions
like shown => We will change the opacity for image to show up => We can choose 0.8 opacity and color get converted to rgb value from color palette => click top pannel 
twice to first chaneg to rgb format and then on right choose opacity */
/* clip path allows to define polygon with which we can make any shape also like arrow => Can see this website for it => https://bennettfeely.com/clippy/ => 
we can define any number of pair coordinates. Remember left top is 0,0 */

header {
  height: 95vh;
  background-image: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.801),
      rgba(85, 197, 122, 0.801)
    ),
    url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  position: relative;
}

/* HTML has 2 types of elements => block and inline. Block elements are like div, p, h1-6, li, ul, table and inline elements are img, input, button, a, label, select, br, span
The block elements starts at new line and takes full width available + they can have top and bottom margin => div like block element are used as containers
The inline element like span starts at same line and takes width taken by content + they cant have top and bottom margin */

/* In html we have placed img which is inline inside a div as it is good practice to put inlines always in some container like div. Also alt of image is used
not just to show text to users but also for seo purposes.  */

/* Now we have added logo img container and top and left from parent and thus absolute position of this container and top and left are wrt to the parent which 
and hence parent is relative. height of logo image itself is given and width will be calc auto based on aspect ration and we could have given it vice versa */

.logo-box {
  position: absolute;
  top: 40px;
  left: 40px;
}

.logo {
  height: 35px;
}

/* Now we have added h1 and there should be ideally one h1 on page as google uses that for SEO => only putting outdoors wont make sense for google and hence all part is h1
and now we will just give diff sizes etc for h1 main and sub which needs to be smaller. display block will make it start in new line and take full width which is what we want
Now this h1 is not in center and it should be responsively in center => So in html we will put all this h1 in one div which we will center and alos because there will be button
in next secttion  which will be in another div => Now best way to center this div is using position as absolute and top and left as 50, 50% => but you will see it 
is not exactly in center and this is because of the text itself has some width and 50% from left was actually for leftest corner of text but we want it to be 
from the center of text to be exactly in center => transform -50 will do it => thus top, left are wrt to the parent for which relative is already added and 
the transform is always wrt element itself i.e. to find the center of the text */

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
}

.heading-primary-main {
  display: block;
  font-weight: 400;
  font-size: 60px;
  letter-spacing: 35px;
  animation-name: moveInLeft;
  animation-duration: 1s;
  /* animation-delay: 3s; */
  /* animation-iteration-count: 3; */
  animation-timing-function: ease-out;
}

.heading-primary-sub {
  display: block;
  font-weight: 700;
  font-size: 20px;
  letter-spacing: 17.4px;
  animation: moveInRight 1s ease-out;
  margin-bottom: 60px;
}

.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
}

/* Now we will add animation to move the main header first left, then right and finally in middle while fading => We define a animation using keyframe 
and in percentage tell what to do at that phase of animation and in between is handled by animation timing function => See above in heading main we have added animation 
moveinleft which we will define below and duration delay, animation timing function which can be custom or linear, ease in etc =>  opacity from 0 to 1 it 
will increase linearly betwen 0% of animation to 100 => translate X  tells the position which is -100 of original position define above for heading main, 
then 10 and then 0 meaning its original position*/

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }
  80% {
    transform: translateX(10px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

/* We will define movein right in similar manner. Also note that this we have included in heading sub but extra prop we defined in shorthand manner. Also if yo
see animation closely you will see that it is little shaky and it can be fixed by adding backface visibiloty like we added above in header primary => we dont
know why this happen and why this solves it  */

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(100px);
  }
  80% {
    transform: translateX(-10px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(30px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Now we will add button => see html for it. We have named classes btn and btn-white and this is good practice, btn common for all and btn-white specific. Now
below we have added pseudo class for btn i.e. link and visited => pseudo class are special case or state for csss selector => link means normal button and
visited means visited which is usually purple but by keeping style for both same, purple wont come
*/
/* Now we want some padding for the button but since a is inline element it wont work and thus we will make it inline block so padding works => text decoration
is things like underline and its color => We have added border radious to make rounded corner and we can give any high value like 200, 500 and result will be same
=> Now we want to bring this button to center and we could do that using transform etc like we did for heading but that will be overdoing, we can do it simply
 by using text-align center in text-box class above and that way, text which is this, inside text-box will be centered */

.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 15px 40px;
  display: inline-block;
  border-radius: 100px;
  transition: all 0.2s;
  position: relative;
}

.btn-white {
  background-color: #fff;
  color: #777;
}

/* When any button hover, we want an animation => it should move up a bit and similarly when its actually clicked i.e. active, it moves up but lesser than hover
=> we added transform translate for both. Now this -3px, -1px are always wrt to the inital state i.e. btn:link => Now we have studied 2 types of animation, one is
using methods like keyframes we did and second one is transition which is easier and we will use now. Now transition property is always added to the starting state
and that is btn:link in this case and thus we add transition above and first param is properties for which it should animate and we said all and second param is 
time of animation => Now whenever the state of btn changes, it will go to let say btn hover and that has diff transform value i.e. and this change of transform
value will be animated in 2s since we have applied aninmation to all i.e. all props in starting state, if any changes, animate that change  */

/* Now on hover we will add some shadow => box shadow take 1) x shadow which we dont want and hence 0 2) y shadow 10px down 3) blur 20px is good 4) color of 
shadow which is black and 0.2 transparency => we added same for active but shadow is less to make that button pressed impression*/

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.199);
}

.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.199);
}

/* We will add another animation of button just to understand power of pseudo elements => pseudo elements are after before etc which are elements that are
hidden and present before or after the main element which is button => they must have the content and display property => Task is to make animation where 
button expands & come back => Now here we will first try making the after pseudo element exactly like our button => just think of it exactly like button element and 
forget about after etc thing => we have also added all things like display border radious for after element. No need for padding as no content inside this and also no 
text decoration since after element is not link and no decoration removal required => Now for the color, since btn-white applied for same element, we can create
a after for btn-white and wherever btn-white is used, the after of that element will have white color. Now to these after-element are actually treated like 
child of main element and thus their height width is wrt to parent main element and hence we have given it 100% since we want it to look like button itself + 
display is also inline block like original button => Now this after button will look like below the original button but we want it behind the original button
=> we will give absolute position and top and left as 0 => it will look for relative going outwards in DOM and will find header but we want this absolute 
position wrt to original button so this goes behind it => add relative to original button .Also add z-index to this after and since its z index is less than
original button, it will be beneath it */

.btn::after {
  display: inline-block;
  content: "";
  border-radius: 100px;
  height: 100%;
  width: 100%;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s;
}

.btn-white::after {
  background-color: #fff;
  color: #777;
}

/* Now lets do original task of expand => See below use of multiple pseudo elements => when btn is hovered, the after element of that button which is 
already present but not visible as it is behind should transform by scaling 2 times => it will give impression like original button has expanded Now to 
animate this scale, we add transition property to original one i.e. btn:after and since changed property is only the size of after, it will animate
Also adding opacity to become 0. We can add another animation where button also comes from bottom => created above new keyframe above with translate Y => 
Creating separate class for this animation btn-animated => If you check this, you will see that button was for some time in original position and then at 
keyframe 0% started from bottom and animated till original position but we dont want that initial button to be in original position => One way is to position 
the original button at 30px bottom and then start upwards but this not good => We can use animation fill mode which basically applies the styles of
animation at 0% also during the time when animation has not started yet. Tried moving part of btn-animated class to btn:link and things work same so there 
was no reason for that except for having neater code. Also note that :: is used for pseudo elements i.e. after while : is used for pseudo classes like hover
However some browser also accepts : for both.*/

.btn:hover::after {
  transform: scale(1.5);
  opacity: 0;
}

.btn-animated {
  animation: moveInBottom 0.5s ease-out 0.75s;
  animation-fill-mode: backwards;
}
