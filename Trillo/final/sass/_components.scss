////////////////////////////////////////
// LOGO
//this is for leftmnost logo in header =>
.logo {
  height: 3.25rem;
  margin-left: 2rem;
}

////////////////////////////////////////
// SEARCH
.search {
  //thsi is actual search inside the parent container => shrink is not allowed and so is the grow => fixed width of 40% of container is to be used =>
  //if container is reduced, so will this search in that case
  flex: 0 0 40%;

  //so that items inside search i.e. button and input becmes centered vertically and horizontally
  display: flex;
  align-items: center;
  justify-content: center;

  @media only screen and (max-width: $bp-smallest) {
    order: 1;
    flex: 0 0 100%;
    background-color: var(--color-grey-light-2);
  }

  &__input {
    font-family: inherit;
    font-size: inherit;
    color: inherit;
    background-color: var(--color-grey-light-2);
    border: none;
    padding: 0.7rem 2rem;
    border-radius: 100px;
    //initially 90% of searchbox
    width: 90%;
    transition: all 0.2s;
    margin-right: -3.25rem; //button will move on top of input

    &:focus {
      //border on clicking and magnify the width on focus
      outline: none;
      width: 100%;
      background-color: var(--color-grey-light-3);
    }

    //when placeholder is shown, text color should be light
    &::-webkit-input-placeholder {
      font-weight: 100;
      color: var(--color-grey-light-4);
    }
  }

  &__input:focus + &__button {
    background-color: var(--color-grey-light-3);
  }

  &__button {
    border: none;
    background-color: var(--color-grey-light-2);

    &:focus {
      outline: none;
    }

    &:active {
      //since on active => width of input will increase this search icon button should also move
      transform: translateY(2px);
    }
  }

  //for icon all we need to set is height and width
  &__icon {
    height: 2rem;
    width: 2rem;
    //this is how we can change the color of the icon
    fill: var(--color-grey-dark-3);
  }
}

//////////////////////////////////////// now we will do the rightmost navigation part of the header => first add flex to make them horizontal
// USER NAVIGATION
.user-nav {
  //the other items in header are taking full row height => make stretch so this right part also takes all space vertically
  align-self: stretch;

  display: flex;
  //make the items vertically center
  align-items: center;

  //all direct childs of this right part should have this => for each child, their child also should be vertically centered hnce added flex and align centr
  & > * {
    padding: 0 2rem;
    cursor: pointer;
    height: 100%;
    //so for icon box, notif and user photo => all we want to vertically center their inside items which is one item obnly => make these parents flex and centers
    display: flex;
    align-items: center;
  }

  //all direct childs on hover should show selection bg color
  & > *:hover {
    background-color: var(--color-grey-light-2);
  }

  &__icon-box {
    position: relative;
  }

  &__icon {
    height: 2.25rem;
    width: 2.25rem;
    fill: var(--color-grey-dark-2);
  }

  //this is the circle of number of notifications that are there for things => using absolute positioning we are fixing ir
  &__notification {
    font-size: 0.8rem;
    height: 1.75rem;
    width: 1.75rem;
    border-radius: 50%;
    background-color: var(--color-primary);
    color: #fff;
    position: absolute;
    top: 1.5rem;
    right: 1.1rem;

    //the flex does not just work on items but also on text => this is div of text and centered using flex
    display: flex;
    justify-content: center;
    align-items: center;
  }

  &__user-photo {
    height: 3.75rem;
    border-radius: 50%;
    margin-right: 1rem;
  }
}

//Now we will create side navigation which is simplem list in HTML and links => https://developer.mozilla.org/en-US/docs/Glossary/Semantics#semantics_in_html
//read this for how to put your html in semantic meaninful way => so for icons we have used svg for each link item => Also note that after this sidebar height
//became full and thus flex has default value of streetch and thats why main right side part also stretched to full height
//
////////////////////////////////////////
// SIDE NAVIGATION
.side-nav {
  font-size: 1.4rem;
  list-style: none;
  margin-top: 3.5rem;

  @media only screen and (max-width: $bp-medium) {
    display: flex;
    margin: 0;
  }

  &__item {
    position: relative;

    &:not(:last-child) {
      margin-bottom: 0.5rem;

      @media only screen and (max-width: $bp-medium) {
        margin: 0;
      }
    }

    @media only screen and (max-width: $bp-medium) {
      flex: 1;
    }
  }

  //we have create a pseduo element which will show when hover happens =>
  &__item::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    //taking height of parent which is item itself
    height: 100%;
    width: 3px;
    background-color: var(--color-primary);
    //this before element is 0 initially and hidden and then on hover of item or active, it becomes 1 and show up. Also for the width thing animation
    //we below said start that animation at .2 sec when scaleY transform has ended and end at .4 sec.
    transform: scaleY(0);
    transition: transform 0.2s, width 0.4s cubic-bezier(1, 0, 0, 1) 0.2s,
      background-color 0.1s;
  }

  &__item:hover::before,
  &__item--active::before {
    transform: scaleY(1);
    width: 100%;
  }

  &__item:active::before {
    background-color: var(--color-primary-light);
  }

  &__link:link,
  &__link:visited {
    color: var(--color-grey-light-1);
    text-decoration: none;
    text-transform: uppercase;
    display: block;
    padding: 1.5rem 3rem;
    position: relative;
    //we want link and its text on top of pseudo element
    z-index: 10;

    //very common case is to align text and icon vertically => since icon and text are inside link, we made this parent flex and by align items center, the
    //childs are vertically aligned
    display: flex;
    align-items: center;

    @media only screen and (max-width: $bp-medium) {
      justify-content: center;
      padding: 2rem;
    }

    @media only screen and (max-width: $bp-small) {
      flex-direction: column;
      padding: 1.5rem 0.5rem;
    }
  }

  &__icon {
    width: 1.75rem;
    height: 1.75rem;
    margin-right: 2rem;
    //currentColor is supported by many browsers and give the current color of the element or its parent and so on
    fill: currentColor;

    @media only screen and (max-width: $bp-small) {
      margin-right: 0;
      margin-bottom: 0.7rem;
      width: 1.5rem;
      height: 1.5rem;
    }
  }
}

////////////////////////////////////////
// LEGAL TEXT
.legal {
  font-size: 1.2rem;
  color: var(--color-grey-light-4);
  text-align: center;
  padding: 2.5rem;

  @media only screen and (max-width: $bp-medium) {
    display: none;
  }
}

////////////////////////////////////////
// GALLERY
.gallery {
  //flex to place them next to one another
  display: flex;

  &__photo {
    width: 100%;
    display: block;
  }
}

////////////////////////////////////////
// HOTEL OVERVIEW
.overview {
  display: flex;
  align-items: center;
  border-bottom: var(--line);

  &__heading {
    font-size: 2.25rem;
    font-weight: 300;
    text-transform: uppercase;
    letter-spacing: 1px;
    padding: 1.5rem 3rem;

    @media only screen and (max-width: $bp-small) {
      font-size: 1.8rem;
      padding: 1.25rem 2rem;
    }
  }

  &__stars {
    //item 1 and item 2 i.e. star are together on left and item 3,4 are on right =>
    //cant use flex with justify as space in between as all eq space => one way is to
    //ask second item stars to flex:1 so it grows and all space it takes on right till item3 comes
    //and item 3,4 takes their natural width => but issue with this is => if item 2 has
    //hover, whole space it created by growing with also hover

    //Theere is better way and nice trick => we can use margin auto right on item 2
    //which is like flex 1 grow only but it will actually grow in terms of margin
    //and not item's width => and this works in case of flex container only
    margin-right: auto;
    //so there is little white space below stars => it is because stars container have some line
    //height => we can actually make container flex and it will go away because it will then
    //decide height fo container based on childs. Also we could
    //reduce the line height of stars
    display: flex;
  }

  &__icon-star,
  &__icon-location {
    width: 1.75rem;
    height: 1.75rem;
    fill: var(--color-primary);
  }

  &__location {
    font-size: 1.2rem;
    display: flex;
    vertical-align: center;
  }

  &__icon-location {
    margin-right: 0.5rem;
  }

  &__rating {
    background-color: var(--color-primary);
    color: #fff;
    margin-left: 3rem;
    padding: 0 2.25rem;
    align-self: stretch;

    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;

    @media only screen and (max-width: $bp-small) {
      padding: 0 1.5rem;
    }
  }

  &__rating-average {
    font-size: 2.25rem;
    font-weight: 300;
    margin-bottom: -3px;

    @media only screen and (max-width: $bp-small) {
      font-size: 1.8rem;
    }
  }

  &__rating-count {
    font-size: 0.8rem;
    text-transform: uppercase;

    @media only screen and (max-width: $bp-small) {
      font-size: 0.5rem;
    }
  }
}

////////////////////////////////////////
// BUTTON INLINE
.btn-inline {
  border: none;
  color: var(--color-primary);
  font-size: inherit;
  border-bottom: 1px solid currentColor;
  padding-bottom: 2px;
  display: inline-block;
  background-color: transparent;
  cursor: pointer;
  transition: all 0.2s;

  & span {
    margin-left: 3px;
    transition: margin-left 0.2s;
  }

  &:hover {
    color: var(--color-grey-dark-1);

    span {
      margin-left: 8px;
    }
  }

  &:focus {
    outline: none;
    animation: pulsate 1s infinite;
  }
}

@keyframes pulsate {
  0% {
    transform: scale(1);
    box-shadow: none;
  }

  50% {
    transform: scale(1.05);
    box-shadow: 0 1rem 4rem rgba(0, 0, 0, 0.25);
  }

  100% {
    transform: scale(1);
    box-shadow: none;
  }
}

////////////////////////////////////////
// PARAGRAPH
.paragraph:not(:last-of-type) {
  margin-bottom: 2rem;
}

////////////////////////////////////////
// LIST
.list {
  list-style: none;
  margin: 3rem 0;
  padding: 3rem 0;
  border-top: var(--line);
  border-bottom: var(--line);

  display: flex;
  //below we have made each item to be 50% and also flex wrap so when 3rd item
  //overflows, it goes to next row >
  flex-wrap: wrap;

  &__item {
    flex: 0 0 50%;
    margin-bottom: 0.7rem;
  }

  //addiung arrow before each list item
  &__item::before {
    content: "";
    display: inline-block;
    height: 1rem;
    width: 1rem;
    margin-right: 0.7rem;

    //Now we can use svg from spirit file but that can be done in html only and
    //we have to write the use tag 8 times => instead we will directly use svg file l
    //like below instead of from spirit file => but there is a problem => we want
    //icon in pink color and by using bg image, we cant do fill thing like earlier
    // Older browsers
    background-image: url(../img/chevron-thin-right.svg);
    background-size: cover;

    //=> for above problem we can use mask for new browsers =>
    //Newer browsers - masks
    //mask is like intersection of background and image and then show that color
    @supports (-webkit-mask-image: url()) or (mask-image: url()) {
      background-color: var(--color-primary);
      -webkit-mask-image: url(../img/chevron-thin-right.svg);
      -webkit-mask-size: cover;
      mask-image: url(../img/chevron-thin-right.svg);
      mask-size: cover;
      background-image: none;
    }
  }
}

////////////////////////////////////////
// RECOMMEND
.recommend {
  font-size: 1.3rem;
  color: var(--color-grey-dark-3);

  display: flex;
  align-items: center;

  &__count {
    margin-right: auto;
  }

  &__friends {
    display: flex;
  }

  &__photo {
    box-sizing: content-box;
    height: 4rem;
    width: 4rem;
    border-radius: 50%;
    border: 3px solid #fff;

    &:not(:last-child) {
      margin-right: -2rem;
    }
  }
}

////////////////////////////////////////
// REVIEWS
.review {
  background-color: #fff;
  box-shadow: var(--shadow-light);
  padding: 3rem;
  margin-bottom: 3.5rem;
  position: relative;
  overflow: hidden;

  @media only screen and (max-width: $bp-medium) {
    padding: 2rem;
    margin-bottom: 3rem;
  }

  &__text {
    margin-bottom: 2rem;
    z-index: 10;
    position: relative;
  }

  &__user {
    display: flex;
    align-items: center;
  }

  &__photo {
    height: 4.5rem;
    width: 4.5rem;
    border-radius: 50%;
    margin-right: 1.5rem;
  }

  &__user-box {
    margin-right: auto;
  }

  &__user-name {
    font-size: 1.1rem;
    font-weight: 600;
    text-transform: uppercase;
    margin-bottom: 0.4rem;
  }

  &__user-date {
    font-size: 1rem;
    color: var(--color-grey-dark-3);
  }

  &__rating {
    color: var(--color-primary);
    font-size: 2.2rem;
    font-weight: 300;
  }

  &::before {
    content: "\201C";
    position: absolute;
    top: -2.75rem;
    left: -1rem;
    line-height: 1;
    font-size: 20rem;
    color: var(--color-grey-light-2);
    font-family: sans-serif;
    z-index: 1;
  }
}

////////////////////////////////////////
// CALL TO ACTION
.cta {
  padding: 3.5rem 0;
  text-align: center;

  @media only screen and (max-width: $bp-medium) {
    padding: 2.5rem 0;
  }

  &__book-now {
    font-size: 2rem;
    font-weight: 300;
    text-transform: uppercase;
    margin-bottom: 2.5rem;
  }
}

////////////////////////////////////////
// CALL TO ACTION
.btn {
  font-size: 1.5rem;
  font-weight: 300;
  text-transform: uppercase;
  border-radius: 100px;
  border: none;
  background-image: linear-gradient(
    to right,
    var(--color-primary-light),
    var(--color-primary-dark)
  );
  color: #fff;
  position: relative;
  overflow: hidden;
  cursor: pointer;

  & > * {
    display: inline-block;
    height: 100%;
    width: 100%;
    transition: all 0.2s;
  }

  &__visible {
    padding: 2rem 7.5rem;
  }

  &__invisible {
    position: absolute;
    padding: 2rem 0;
    left: 0;
    top: -100%;
  }

  &:hover {
    background-image: linear-gradient(
      to left,
      var(--color-primary-light),
      var(--color-primary-dark)
    );
  }

  &:hover &__visible {
    transform: translateY(100%);
  }

  &:hover &__invisible {
    top: 0;
  }

  &:focus {
    outline: none;
    animation: pulsate 1s infinite;
  }
}
